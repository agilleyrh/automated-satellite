---
- name: Convert2rhel conversion
  hosts: "{{ dynamic_inventory_group | default(omit) }}"
  strategy: ansible.builtin.free
  gather_facts: true
  become: true
  environment:
    CONVERT2RHEL_DISABLE_TELEMETRY: 1
    # CONVERT2RHEL_UNSUPPORTED_INCOMPLETE_ROLLBACK: 1
    CONVERT2RHEL_INCOMPLETE_ROLLBACK: 1
  vars:
    rhsm_username: ""
    rhsm_password: ""
    rhsm_org: "{{ org_id }}"
    rhsm_activation_key: "{{ rhel_lifecycle_environment }}"

# Adding repo check for forward looking functionality
  pre_tasks:
    - name: Register output of 'yum repolist'
      ansible.builtin.shell: |
        set -o pipefail
        yum repolist all --verbose | grep Repo-baseurl | grep -v convert2rhel
      args:
        executable: /bin/bash
      register: yum_repolist_for_baseurl
      changed_when: yum_repolist_for_baseurl.rc != 0

    # Determine if node is an EC2 Marketplace instance utilizing Oracle repo infrastructure
    - name: Set fact for Oracle repo utilization
      ansible.builtin.set_fact:
        oracle_marketplace_repo_in_use: true
      when:
        - ansible_system_vendor == "Amazon EC2" or ansible_system_vendor == "Xen"
        - ansible_product_uuid|regex_search('^ec2') or ansible_product_uuid|regex_search('^EC2')
        - "'yum.oracle.com' in yum_repolist_for_baseurl.stdout"
        - ansible_distribution_major_version|int == 7

  tasks:
    - name: Verify operating system
      ansible.builtin.assert:
        that:
          - ("ansible_distribution == 'CentOS'") or ("ansible_distribution == 'OracleLinux'")
        fail_msg: "OS must be CentOS or OracleLinux"
        success_msg: "CentOS or OracleLinux requirement met, continue..."

    - name: Verify major and minor versions
      ansible.builtin.assert:
        that:
          - "ansible_distribution_major_version | int  == 7"
          - "ansible_distribution_version.split('.')[1] | int >= 9"
        fail_msg: "Release version must be >= 7.9"
        success_msg: "Release version requirement met, continue..."

    # - name: Install convert2rhel utility
    #   ansible.builtin.import_role:
    #     name: infra.convert2rhel.common

    # - name: Pull katello-ca-consumer package from satellite server and place under /usr/share/convert2rhel/subscription-manager
    #   ansible.builtin.get_url:
    #     url: https://satellite.example.com/pub/katello-ca-consumer-latest.noarch.rpm
    #     dest: /usr/share/convert2rhel/subscription-manager/katello-ca-consumer-latest.noarch.rpm
    #     mode: '0440'
    #     validate_certs: false

    - name: Set delay time via gather_facts
      ansible.builtin.set_fact:
        node_delay_time: "{{ inventory_hostname | regex_replace('^\\D+|\\..*', '') | int *30 }}"

    - name: Include delay before starting conversion
      ansible.builtin.command: |
        python3 -c 'import time;time.sleep({{ node_delay_time }})'
      delegate_to: localhost
      connection: local

    - name: Execute conversion via infra.convert2rhel.convert role - non Oracle Linux
      when: ansible_distribution != 'OracleLinux'
      ansible.builtin.import_role:
        name: infra.convert2rhel.convert

    - name: Execute conversion via infra.convert2rhel.convert role - Oracle Linux
      when: ansible_distribution == 'OracleLinux'
      ansible.builtin.import_role:
        name: infra.convert2rhel.convert
      environment:
        CONVERT2RHEL_SKIP_KERNEL_CURRENCY_CHECK: 1

    # - name: Generate current repo configuration
    #   ansible.builtin.command: >-
    #     subscription-manager repos
    #   ignore_errors: true

    # - name: Update system facts on Satellite
    #   ansible.builtin.command: >-
    #     subscription-manager facts --update
    #   ignore_errors: true
...
