---
- name: Generate Content Host registration command via Satellite API method
  hosts: localhost
  become: true
  gather_facts: false
  vars:
    login: &login
      server_url: "{{ lookup('env', 'SATELLITE_SERVER_URL') }}"
      username: "{{ lookup('env', 'SATELLITE_USERNAME') }}"
      password: "{{ lookup('env', 'SATELLITE_PASSWORD') }}"
      validate_certs: "{{ lookup('env', 'SATELLITE_VALIDATE_CERTS') }}"
    satellite_username: "{{ lookup('env', 'SATELLITE_USERNAME') }}"
    satellite_password: "{{ lookup('env', 'SATELLITE_PASSWORD') }}"
    satellite_validate_certs: "{{ lookup('env', 'SATELLITE_VALIDATE_CERTS') | default(true) }}"
    setup_insights: false
    set_remote_execution: false
    update_packages: false
    activation_key: "MyAK"
    force_register: false
  tasks:
    - name: Set Activation Key
      ansible.builtin.set_fact:
        activation_key: "{{ rhel_version + '_' + env }}"

    - name: List organization info
      redhat.satellite.resource_info:
        <<: *login
        resource: organizations
      register: organizations_resource_info_result

    - name: List location info
      redhat.satellite.resource_info:
        <<: *login
        resource: locations
      register: locations_resource_info_result

    - name: List capsule info
      redhat.satellite.resource_info:
        <<: *login
        resource: capsules
      register: capsules_resource_info_result

    - name: Select capsule hostname from capsules resource_info
      ansible.builtin.set_fact:
        capsule_hostname: "{{ capsules_resource_info_result.resources | selectattr('name', 'search', '^satellite') | map(attribute='name') | to_yaml }}"

    - name: Generate a host registration command
      ansible.builtin.uri:
        url: "https://{{ capsule_hostname }}/api/registration_commands/"
        user: "{{ satellite_username }}"
        password: "{{ satellite_password }}"
        method: POST
        body: "{{ lookup('template', './sat_host_reg/reg_args.j2') }}"
        force_basic_auth: true
        body_format: json
        return_content: true
      register: reg_cmd

    - name: Export host registration command as a fact
      ansible.builtin.set_fact:
        reg_cmd: "{{ reg_cmd.json['registration_command'] }}"

- name: Register Content Hosts to Satellite
  hosts: "{{ HOSTS is defined | ternary(HOSTS, PREFIX|default('')+'*') }}"
  strategy: ansible.builtin.free
  become: true
  gather_facts: false
  tasks:
    - name: Check registration status
      ansible.builtin.command: subscription-manager identity
      register: sub_man_status

    - name: Run registration command
      ansible.builtin.command: bash -c "{{ reg_cmd }}"
      when: "'This system is not yet registered' in sub_man_status['stderr']"
...
