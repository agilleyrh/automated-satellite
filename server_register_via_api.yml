---
- name: Pre-registration tasks for Content Hosts to Satellite
  hosts: "{{ HOSTS is defined | ternary(HOSTS, PREFIX|default('')+'*') }}"
  strategy: ansible.builtin.free
  become: true
  gather_facts: true
  tasks:
    - name: Check registration status pre registration
      ansible.builtin.command: subscription-manager identity
      register: sub_man_status_pre
      failed_when: not sub_man_status_pre.failed
      changed_when: false

    - name: Verify current registration status
      ansible.builtin.assert:
        that:
          - '"system identity" not in sub_man_status_pre.stdout'
          - '"This system is not yet registered" in sub_man_status_pre.stderr'
        fail_msg: "Content Host already registered."
        success_msg: "Content Host is not currently registered."

    - name: Remove rhui client packages
      ansible.builtin.yum:
        name: rh-amazon-rhui-client*
        state: removed

    - name: Get current repos
      ansible.builtin.command:
        cmd: ls /etc/yum.repos.d/
      register: repos
      changed_when: false

    - name: Remove existing rhui repos
      ansible.builtin.file:
        path: "/etc/yum.repos.d/{{ item }}"
        state: absent
      loop: "{{ repos.stdout_lines }}"

    - name: Define activation key for RHEL systems
      ansible.builtin.set_fact:
        activation_key: "{{ 'RHEL' + ansible_distribution_major_version + '_' + env }}"
      when: ansible_distribution == 'RedHat'

    - name: Define activation key for CentOS systems
      ansible.builtin.set_fact:
        activation_key: "{{ 'CentOS' + ansible_distribution_major_version + '_' + env }}"
      when: ansible_distribution == 'CentOS'

    - name: Define activation key for OracleLinux systems
      ansible.builtin.set_fact:
        activation_key: "{{ 'OL' + ansible_distribution_major_version + '_' + env }}"
      when: ansible_distribution == 'OracleLinux'

    - name: Ensure subscription-manager package is present for EL-rebuild distributions
      ansible.builtin.yum:
        name: subscription-manager
        state: present
      when: ansible_distribution != 'RedHat'

- name: Generate Content Host registration command via Satellite API method
  hosts: localhost
  become: true
  gather_facts: false
  vars:
    login: &login
      server_url: "{{ lookup('env', 'SATELLITE_SERVER_URL') }}"
      username: "{{ lookup('env', 'SATELLITE_USERNAME') }}"
      password: "{{ lookup('env', 'SATELLITE_PASSWORD') }}"
      validate_certs: "{{ lookup('env', 'SATELLITE_VALIDATE_CERTS') }}"
    satellite_username: "{{ lookup('env', 'SATELLITE_USERNAME') }}"
    satellite_password: "{{ lookup('env', 'SATELLITE_PASSWORD') }}"
    satellite_validate_certs: "{{ lookup('env', 'SATELLITE_VALIDATE_CERTS') | default(true) }}"
    setup_insights: false
    set_remote_execution: false
    update_packages: false
    subtoken_activation_key: "AKtempSubToken"
    force_register: false
  tasks:
    - name: List organization info
      redhat.satellite.resource_info:
        <<: *login
        resource: organizations
      register: organizations_resource_info_result

    - name: List location info
      redhat.satellite.resource_info:
        <<: *login
        resource: locations
      register: locations_resource_info_result

    - name: List capsule info
      redhat.satellite.resource_info:
        <<: *login
        resource: capsules
      register: capsules_resource_info_result

    - name: Select capsule hostname from capsules resource_info
      ansible.builtin.set_fact:
        capsule_hostname: "{{ capsules_resource_info_result.resources | selectattr('name', 'search', '^satellite') | map(attribute='name') | list | first }}"

    - name: Generate host registration command
      ansible.builtin.uri:
        url: "https://{{ capsule_hostname }}/api/registration_commands/"
        user: "{{ satellite_username }}"
        password: "{{ satellite_password }}"
        method: POST
        body: "{{ lookup('template', './sat_host_reg/reg_args.j2') }}"
        force_basic_auth: true
        body_format: json
        return_content: true
      register: reg_cmd

    - name: Export host registration command as a fact
      ansible.builtin.set_fact:
        reg_cmd: "{{ reg_cmd.json['registration_command'] }}"

    - name: Display generated registration command
      ansible.builtin.debug:
        msg: "registration command ==> {{ reg_cmd }}"

- name: Register Content Hosts to Satellite
  hosts: "{{ HOSTS is defined | ternary(HOSTS, PREFIX|default('')+'*') }}"
  strategy: ansible.builtin.free
  become: true
  gather_facts: false
  tasks:
    - name: Install katello-ca-consumer package
      ansible.builtin.yum:
        name: "https://{{ hostvars['localhost']['capsule_hostname'] }}/pub/katello-ca-consumer-latest.noarch.rpm"
        state: present
        #validate_certs: no
        #disable_gpg_check: true

    - name: Run registration command
      ansible.builtin.shell: "{{ hostvars['localhost']['reg_cmd'] | regex_replace('AKtempSubToken',activation_key) }}"
      when: "'This system is not yet registered' in sub_man_status_pre['stderr']"

    - name: Include delay before registration verfication
      ansible.builtin.command: |
        python3 -c 'import time;time.sleep(5)'
      delegate_to: localhost
      connection: local

    - name: Check registration status post registration
      ansible.builtin.command: subscription-manager identity
      register: sub_man_status_post

    - name: Verify registration successful
      ansible.builtin.assert:
        that:
          - '"system identity" in sub_man_status_post.stdout'
          - 'inventory_hostname in sub_man_status_post.stdout'
          - 'organization in sub_man_status_post.stdout'
        fail_msg: "Content Host registration unsuccessful."
        success_msg: "Content Host registration verification successful."

    - name: Enable all repositories
      when:
        - "ansible_distribution == 'CentOS'"
        - "ansible_distribution_major_version | int  == 7"
      ansible.builtin.command: |
        yum-config-manager --enable \*
...
