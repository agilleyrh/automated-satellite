---
- name: Wait for connection...
  ansible.builtin.wait_for_connection:
    connect_timeout: 20
    sleep: 5
    delay: 5
    timeout: 300

- name: Define kernel modules to unload
  ansible.builtin.set_fact:
    kernel_modules_to_unload:
      - floppy
      - pata_acpi
      - btrfs

- name: Kernel modules defined by kernel_modules_to_unload are unloaded
  community.general.modprobe:
    name: "{{ item }}"
    state: absent
  loop: "{{ kernel_modules_to_unload }}"

- name: Remove pam_pkcs11 module # noqa command-instead-of-module
  ansible.builtin.shell: |
    set -o pipefail
    leapp answer --section remove_pam_pkcs11_module_check.confirm=True
  args:
    executable: /bin/bash

- name: Configure sshd
  ansible.builtin.lineinfile:
    path: "/etc/ssh/sshd_config"
    regex: "^(#)?{{ item.key }}"
    line: "{{ item.key }} {{ item.value }}"
    state: present
  loop:
    - {key: "PermitRootLogin", value: "prohibit-password"}
    - {key: "PasswordAuthentication", value: "no"}
  notify:
    - Restart sshd

- name: Copy rpm-query-oracle-vendor.sh to remote node 
  ansible.builtin.copy:
    src: "rpm-query-oracle-vendor.sh"
    dest: "/tmp/rpm-query-oracle-vendor.sh"
    mode: '0744'

- name: Query for packages that are remnants from OracleLinux7 conversions
  ansible.builtin.command: /tmp/rpm-query-oracle-vendor.sh
  register: oracle_vendor_packages
  changed_when: false

# - name: Debug oracle_vendor_packages
#   ansible.builtin.debug:
#     msg:
#       - "OracleLinux7 package  ==> {{ item.split(':')[1] }}"
#   when: '"Oracle" in item'
#   with_items: "{{ oracle_vendor_packages.stdout_lines }}"

- name: Remove OracleLinux7 remnant packages
  ansible.builtin.yum:
    name: "{{ item.split(':')[1] }}"
    state: absent
  when:
    - '"Oracle" in item'
    - oracle_vendor_packages.stdout_lines | length > 0
  loop: "{{ oracle_vendor_packages.stdout_lines }}"

- name: Command - yum clean all
  ansible.builtin.command: >-
    yum clean all

- name: Get list of current yum cache directories
  ansible.builtin.command: >-
    ls /var/cache/yum/
  register: yum_cache_directories
  changed_when: false

- name: Remove current yum cache directories
  ansible.builtin.file:
    path: "/var/cache/yum/{{ item }}"
    state: absent
  loop: "{{ yum_cache_directories.stdout_lines }}"
...
