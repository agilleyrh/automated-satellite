---
### Experimental - WIP ###
- hosts: "{{ HOSTS | default('control[0]') }}"
  connection: local
  tasks:
  - name: "Get instance details"
    ansible.builtin.import_role:
      name: ec2_node_tools
      tasks_from: get_instance_details

  - ansible.builtin.set_fact:
      host_ec2_instance_id: {}

  - name: "Set facts based on individual host's ec2 instance_id"
    ansible.builtin.set_fact:
      host_ec2_instance_id: >
        {{
          host_ec2_instance_id |
          combine(
            { item.key : instances_details | json_query(ansible_instance_id_query) }
                 )
        }}
    vars:
      ansible_instance_id_query: "instances[?contains(['{{ item.key.split('.')[0] | lower }}'], tags.short_name)].instance_id | [0]"
    loop: "{{ lookup('dict', group_tag_map) }}"
    when: instances_details is not none

  - ansible.builtin.debug:
      msg:
        - "Instance ID ==> {{ host_ec2_instance_id[item.key] }}"
        - "Node ==> {{ item.key }}"
        - "AnsibleGroup ==> {{ item.value }}"
    loop: "{{ lookup('dict', group_tag_map) }}"
    when:
      - instances_details is not none
      - display_debug_output

  - name: find ami for rhel node
    amazon.aws.ec2_ami_info:
      region: "{{ ec2_region }}"
      owners: "{{ ec2_info[rhel].owners }}"
      filters:
        name: "{{ ec2_info[rhel].filter }}"
        architecture: "{{ ec2_info[rhel].architecture }}"
    register: amis

  - name: save ami for rhel node
    ansible.builtin.set_fact:
      node_ami_rhel: >
        {{ amis.images | selectattr('name', 'defined') | sort(attribute='name') | last }}

  - name: Create EC2 instances for node1
    amazon.aws.ec2_instance:
      state: started
      network:
        assign_public_ip: true
      key_name: "{{ ec2_name_prefix }}-key"
      security_group: "{{ ec2_security_group }}"
      instance_type: "{{ ec2_info[rhel].size[list_count|int] }}"
      image_id: "{{ node_ami_rhel.image_id }}"
      region: "{{ ec2_region }}"
      exact_count: "{{ student_total|int }}"
      filters:
        instance-state-name: running
        "tag:Workshop_node1": "{{ ec2_name_prefix }}-node1"
      tags:
        Workshop_node1: "{{ ec2_name_prefix }}-node1"
        Workshop: "{{ ec2_name_prefix }}"
        uuid: "{{ ec2_name_prefix }}"
        guid: "{{ ec2_name_prefix }}"
        Workshop_type: "{{ workshop_type }}"
        AWS_USERNAME: "{{ aws_user }}"
        owner: "{{ aws_user }}"
        Info: "AWS_USERNAME that provisioned this-> {{ aws_user }}"
        Linklight: "This was provisioned through the linklight provisioner"
        Students: "{{ student_total|int }}"
        short_name: "node1"
        username: "{{ ec2_info[rhel].username }}"
        ansible-workshops: "true"
      wait: "{{ ec2_wait }}"
      vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
      volumes:
        - device_name: /dev/sda1
          ebs:
            volume_type: "{{ ec2_info[rhel].disk_volume_type }}"
            volume_size: "{{ ec2_info[rhel].disk_space }}"
            iops: "{{ ec2_info[rhel].disk_iops }}"
            throughput: "{{ ec2_info[rhel].disk_throughput }}"
            delete_on_termination: true
    register: ec2_instance_create_test

  - ansible.builtin.debug:
      msg: "{{ seec2_instance_create_testan_test }}"

  - name: grab instance ids to tag node1
    amazon.aws.ec2_instance_info:
      region: "{{ ec2_region }}"
      filters:
        instance-state-name: running
        "tag:Workshop_node1": "{{ ec2_name_prefix }}-node1"
    register: node1_output

  - name: Ensure tags are present for node1
    amazon.aws.ec2_tag:
      region: "{{ ec2_region }}"
      resource: "{{ item.1.instance_id }}"
      state: present
      tags:
        Name: "{{ ec2_name_prefix }}-student{{ item.0 + 1 }}-node1"
        Index: "{{ item[0] }}"
        Student: "student{{ item.0 + 1 }}"
        launch_time: "{{ item.1.launch_time }}"
    with_indexed_items:
      - "{{ node1_output.instances }}"
    when: node1_output.instances|length > 0

  - name: Associate IAM instance profile with node1
    amazon.aws.ec2_instance:
      instance_ids: "{{ item.1.instance_id }}"
      region: "{{ ec2_region }}"
      instance_role: "VPCLockDown_{{ ec2_name_prefix }}_student{{ item.0 + 1 }}"
      state: running
      wait: true
    with_indexed_items:
      - "{{ node1_output.instances }}"
    register: associate_iam_instance_profile
    until: associate_iam_instance_profile is not failed
    retries: 12
    delay: 10
    when:
      - node1_output.instances|length > 0
      - tower_node_aws_api_access|default(false)|bool
...
