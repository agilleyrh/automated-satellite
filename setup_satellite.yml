---
- hosts: "{{ HOSTS | default('satellite.example.com') }}"
  connection: local
  gather_facts: false
  tasks:
    - name: Satellite deployment instrumentation
      ansible.builtin.uri:
        url: https://docs.google.com/forms/d/e/1FAIpQLSdIZ77YpETjEfGOoYlXtMnQiU-6M7QFlb2hJA4ujo25QYb2jw/formResponse
        method: POST
        body: "ifq&entry.1569353616=smart_mgmt &entry.498055740={{ lookup('ansible.builtin.env', 'AWX_HOST') }}&sumbit=Submit"
      ignore_errors: true

    - name: Check satellite status
      redhat.satellite.status_info:
        validate_certs: false

- hosts: "{{ HOSTS | default('satellite.example.com') }}"
  become: true
  vars:
    refresh_satellite_manifest: false
    refresh_timeout: 14400
  tasks:
    - name: Hammer org list to JSON
      ansible.builtin.command: >-
        hammer --output json organization list
      register: hammer_org_list_result
      ignore_errors: true

    - name: Set the Organization Label from specific org selection via "{{ organization_name }}" variable and .Label
      ansible.builtin.set_fact: sat_org_label={{ hammer_org_list_result.stdout | from_json | json_query(my_query) }}
      vars:
        my_query: "[?Label=='{{ organization_name }}'].Label"

    - name: What is the Org Label?
      ansible.builtin.debug:
        msg: "The Org Label selected is: {{ sat_org_label[0] }}"

    - when: refresh_satellite_manifest
      block:
        - name: Create tempfile for Satellite production.log asynchronous tail
          ansible.builtin.tempfile:
            state: file
          register: sat_prodlog_tempfile

        - name: Asynchronous tail Satellite production.log to tempfile
          ansible.builtin.shell: tail -n 0 -f /var/log/foreman/production.log > {{ sat_prodlog_tempfile.path }}
          async: "{{ refresh_timeout }}"
          poll: 0

- hosts: "{{ HOSTS | default('satellite.example.com') }}"
  connection: local
  gather_facts: false
  vars:
    refresh_satellite_manifest: false
    refresh_timeout: 14400
  tasks:
    - name: Refresh manifest
      redhat.satellite.subscription_manifest:
        organization: "Default Organization"
        state: refreshed
      async: "{{ refresh_timeout }}"
      poll: 0
      register: refresh_async
      delegate_to: localhost
      when: refresh_satellite_manifest

- hosts: "{{ HOSTS | default('satellite.example.com') }}"
  become: true
  vars:
    refresh_satellite_manifest: false
    refresh_timeout: 14400
  tasks:
    - block:
        - name: >
            Watch the temp file until ManifestRefresh result ==> success appears before continuing...
          ansible.builtin.wait_for:
            path: "{{ sat_prodlog_tempfile.path }}"
            search_regex: "^.*ManifestRefresh.*state\ changed.*\ stopped\ \ result.*\ success"
            timeout: 1500
            sleep: 20

        - name: Remove tempfile
          ansible.builtin.file:
            path: "{{ sat_prodlog_tempfile.path }}"
            state: absent
      when: refresh_satellite_manifest

- hosts: "{{ HOSTS | default('satellite.example.com') }}"
  connection: local
  gather_facts: false
  tasks:
    - ansible.builtin.include_tasks: setup_satellite_infra_subtasks.yml
...
